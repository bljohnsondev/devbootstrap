- name: Bootstrap development environment
  hosts: localhost
 
  tasks:
  - name: Install packages
    import_role:
      name: packages

  - name: Set login shell of user {{ ansible_env.USER }} to `/bin/zsh`
    ansible.builtin.command: usermod --shell /bin/zsh {{ ansible_env.USER }}
    become: true
    changed_when: false

  - name: Get stats on ohmyzsh
    ansible.builtin.stat:
      path: "{{ ansible_env.HOME }}/.oh-my-zsh"
    register: omzst

  - name: Download ohmyzsh installer
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: /tmp/install_ohmyzsh.sh
    when: not omzst.stat.exists
    register: omzinstall_status

  - name: Run ohmyzsh installer
    command: sh /tmp/install_ohmyzsh.sh --unattended
    register: ohmyzsh_result
    failed_when: "'FAILED' in ohmyzsh_result.stderr"
    when: omzinstall_status.skipped is not defined or not omzinstall_status.skipped

  - name: Get stats on .zshrc file
    ansible.builtin.stat:
      path: "{{ ansible_env.HOME }}/.zshrc"
    register: zsym

  - name: Renaming default .zshrc file if not a symlink
    command: mv "{{ ansible_env.HOME }}/.zshrc" "{{ ansible_env.HOME }}/.zshrc.orig"
    when: zsym.stat.islnk is defined and zsym.stat.islnk == False

  - name: Get stats on NVM directory
    ansible.builtin.stat:
      path: "{{ ansible_env.HOME }}/.nvm"
    register: nvmst

  - name: Download Node Version Manager (NVM)
    git:
      repo: "https://github.com/nvm-sh/nvm.git"
      dest: "{{ ansible_env.HOME }}/.nvm"
      clone: true
    when: not nvmst.stat.exists
    register: nvminstall_status

  - name: Install latest Node LTS
    shell: source "{{ ansible_env.HOME }}/.nvm/nvm.sh" && nvm install --lts
    args:
      executable: /bin/zsh
    when: nvminstall_status.skipped is not defined or not nvminstall_status.skipped

  - name: Get stats on tmux plugin manager
    ansible.builtin.stat:
      path: "{{ ansible_env.HOME }}/.config/tmux/plugins/tpm"
    register: tpmst

  - name: Download tmux plugin manager
    git:
      repo: "https://github.com/tmux-plugins/tpm"
      dest: "{{ ansible_env.HOME }}/.config/tmux/plugins/tpm"
      clone: true
    when: not tpmst.stat.exists

  - name: Running Dotbot install
    ansible.builtin.command: "{{ playbook_dir }}/../dotfiles/install"
    register: dotbot
    changed_when: false
    when: run_dotbot is defined and run_dotbot|bool

  - debug: var=dotbot.stdout_lines
    when: run_dotbot is defined and run_dotbot|bool
